// Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
// Created on Sun Sep 29 16:47:52 2019

`timescale 1ns/1ps
`include "/home/drcah4ec/lab4_alu/defines.v"

module alu_tb;

reg [31:0] op_a_sig;
reg [31:0] op_b_sig;
reg [5:0] alu_opsel_sig;

wire [31:0] alu_result_l_sig;
wire [31:0] alu_result_h_sig;
wire ovf_flag_sig;
wire zero_flag_h_sig;
wire zero_flag_l_sig;
wire cf_flag_sig;

integer i, j;

alu alu_inst
(
	.op_a(op_a_sig) ,	// input [31:0] op_a_sig
	.op_b(op_b_sig) ,	// input [31:0] op_b_sig
	.ovf_flag(ovf_flag_sig) ,	// output  ovf_flag_sig
	.cf_flag(cf_flag_sig) ,	// output  cf_flag_sig
	.zero_flag_h(zero_flag_h_sig) ,	// output  zero_flag_h_sig
	.zero_flag_l(zero_flag_l_sig) ,	// output  zero_flag_l_sig
	.alu_result_l(alu_result_l_sig) ,	// output [31:0] alu_result_l_sig
	.alu_result_h(alu_result_h_sig) ,	// output [31:0] alu_result_h_sig
	.alu_opsel(alu_opsel_sig) 	// input [5:0] alu_opsel_sig
);

initial begin

////////BARREL SHIFTER	
	alu_opsel_sig = `BS;
	
	op_b_sig = $random();

	for(i = 0; i <= 16; i = i + 4) begin
		op_a_sig = i;
		for(j = 0; j <= 7; j = j + 1) begin
			alu_opsel_sig[5:3] = j;
			#10;
		end	 	
	end

////////ADDER_SUBSTRACTOR	
	alu_opsel_sig = `ADDSUB;
	alu_opsel_sig[3] = 0;
	
	op_a_sig = 32'hffffffff;
	op_b_sig = 32'hffffffff;
	#10;

	op_a_sig = 10;
	op_b_sig = 5;
	#10;

	op_a_sig = 32'hffffffff;
	op_b_sig = 32'h0fffffff;
	#10;

	op_a_sig = $random();
	op_b_sig = $random();
	#10;

	alu_opsel_sig[3] = 1;
	
	op_a_sig = 32'hffffffff;
	op_b_sig = 32'hffffffff;
	#10;

	op_a_sig = 10;
	op_b_sig = 5;
	#10;

	op_a_sig = 32'hffffffff;
	op_b_sig = 32'h0fffffff;
	#10;

	op_a_sig = $random();
	op_b_sig = $random();
	#10;

////////MULTIPLIER
	alu_opsel_sig = `MUL;

	op_a_sig = 32'hffffffff;
	op_b_sig = 32'h0fffffff;
	#10;

	op_a_sig = 32'hffffffff;
	op_b_sig = 32'hffffffff;
	#10;

	op_a_sig = $random();
	op_b_sig = $random();
	#10;

	op_a_sig = 123;
	op_b_sig = 10;
	#10;

////////DIVIDER
	alu_opsel_sig = `DIV;

	op_a_sig = 32'hffffffff;
	op_b_sig = 32'h0fffffff;
	#10;

	op_a_sig = 32'hffffffff;
	op_b_sig = 32'hffffffff;
	#10;

	op_a_sig = $random();
	op_b_sig = $random();
	#10;

////////LOGIC FUNCTIONS
	alu_opsel_sig = `LOGIC;
	alu_opsel_sig[4:3] = 0;

	op_a_sig = 32'hA4AA4A44;
	op_b_sig = 32'hA4AA4A44;
	
	for(i = 0; i < 4; i = i + 1) begin
		alu_opsel_sig[4:3] = i;
		#10;
	end


	op_a_sig = $random();
	op_b_sig = $random();
	
	for(i = 0; i < 4; i = i + 1) begin
		alu_opsel_sig[4:3] = i;
		#10;
	end

////////COMMON TEST
	for(i = 0; i <= 7; i = i + 1) begin
		alu_opsel_sig[2:0] = i;
		for(j = 0; j <= 7; j = j + 1) begin
			alu_opsel_sig[5:3] = j;
			op_a_sig = $random();
			op_b_sig = $random();
			#10;
		end

	end
	
end

initial begin
	#1500 $stop();
end
endmodule

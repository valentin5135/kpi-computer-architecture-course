
=============================================
Лабораторна робота №5
=============================================

Тема
----------

Створення та верифікація саморобного RISC ядра.



Хід роботи
----------


**Специфікація.** Специфікація була визначена явно у завданні.
* Зібрати однотактне MIPS подібне ядро, що підтримує наступні інструкції
``add, sub, slt, sgt (with flags affect), mul.hi, mul.lo, div, rem, and, or, nor, xor, lsl, lsr, asr, ror``,
всі вищезазначені інструкції з суфіксом i(i-типу), ``jmp, jz/jnz, jc/jnc, jo/jno, jn/jnn``.
* написати тест, що тестуватиме кожну інструкцію
* написати на асемблері код та перетворити його на текстовий файл з двійковими інструкціями
* перевірити на працездатність




**Створення проекту.** Проект було вирішено реалізувати на HDL SystemVerilog, як більш функціональному наступнику Verilog. 
Він складається з багатьох модулів, що описані в декількох файлах. У якості модуля використовувався також ALU з минулої лабораторної. 
Для спрощення архітектури я дещо видозмінив завдання: замість 64-бітного виходу реалізований 32-бітний, а операції
множення та ділення розбиваються на старшу та молодшу частину. 


**Що зроблено.**
Усі вимоги, зазначені у специфікації, було виконано з деякими модифікаціями, а саме.
* замість двох варіантів інструкцій ``add, sub`` було використано по одному, а їх опкоди зайняли SBT для беззнакових та SLT для знакових.
* через особливості вбудованої пам'яті Cyclone2 читання з RAM було вирішено зробити синхронним по задньому фронту.
* Ядро бінарно несумісне з MIPS, так як практично не містить microcoded інструкцій, а користується в основному опкодами напряму.
* Було додано Memory Mapped IO у вигляді порту виводу на світлодіоди. По-перше, без виходів міпс не збирався, по-друге, 
тепер він готовий до заливання на плату.
Частина модулів параметризована як *reusable*, а частина є немасштабованими через несумісність з набором інструкцій фіксованої довжини.
У процесі розробки ядра був написаний sed скрипт, що має виконувати роль асемблера, ціль додана у мейкфайл.
Я зібрав міпс у Quartus, визначив  максимальну тактову частоту за допомогою time quaet timing analyzer, 
вона виявилася малою: 3.5 МГц. Проте, якщо прибрати схему ділення з АЛУ, частота зростає до 24 МГц.
На своєму 'асемблері' написав програму, що сортує масив з RAM, а також тестує інші інструкції та
забезпечив лістинг коментарями. Детальна інформація по інструкціям у sed-скрипті.


.. image:: media/rtl.png
Так виглядає RTL схема mips, написаного на SystemVerilog.

.. image:: media/characteristics.png
Так виглядають ресурси використані у цьому ядрі.


Висновки
-----------

Під час виконання лабораторної роботи я створив MIPS подібне ядро відповідно до специфікації, навчився працювати з TimeQuest та використовувіти шаблони при описі 
цифрових пристроїв, а також написав свій 'асемблер' та код на ньому. Однотактний процесор готовий до заливки у плату. Також, пункти про використання поля ``shamt``
у barrel shifter та одного суматору у блоку маніпуляції PC не були виконані, тому що у першому поле ``shamt`` має іншу функцію, а по-друге, один суматор було б
можливо використати, якби у нас були тільки відносні переходи. 





